import splunk_ta_new_relic_declare

import os
import sys
import time
import datetime

import modinput_wrapper.base_modinput
from solnlib.packages.splunklib import modularinput as smi



import input_module_newrelic_account as input_module


'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_newrelic_account.py
'''
class ModInputnewrelic_account(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if 'use_single_instance_mode' in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInputnewrelic_account, self).__init__("splunk_ta_new_relic", "newrelic_account", use_single_instance)
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputnewrelic_account, self).get_scheme()
        scheme.title = ("New Relic Account Summary")
        scheme.description = ("Collect data for Web Applications, Key Transactions, Mobile Applications and Alert Violations for a New Relic Account from a single input.")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        scheme.add_argument(smi.Argument("account", title="New Relic Account Number",
                                         description="This can be found in the URL when you log into New Relic.  e.g.  https://rpm.newrelic.com/accounts/######/...",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("api_key", title="New Relic API Key",
                                         description="Your API Key can be found here: https://rpm.newrelic.com/accounts/######/integrations?page=api_keys",
                                         required_on_create=True,
                                         required_on_edit=False))
        return scheme

    def get_app_name(self):
        return "Splunk_TA_New_Relic"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_fields = []
            customized_settings = {u'type': u'customized', u'parameters': [{u'name': u'account', u'default_value': u'', u'format_type': u'text', u'required': True, u'help_string': u'This can be found in the URL when you log into New Relic.  e.g.  https://rpm.newrelic.com/accounts/######/...', u'label': u'New Relic Account Number', u'type': u'text', u'placeholder': u'######'}, {u'name': u'api_key', u'default_value': u'', u'format_type': u'text', u'required': True, u'help_string': u'Your API Key can be found here: https://rpm.newrelic.com/accounts/######/integrations?page=api_keys', u'label': u'New Relic API Key', u'type': u'text', u'placeholder': u''}], 'use_external_validation': True, u'description': u'Collect data for Web Applications, Key Transactions, Mobile Applications and Alert Violations for a New Relic Account from a single input.', 'index': 'default', u'customized_options': [{u'name': u'account', u'value': u'781649'}, {u'name': u'api_key', u'value': u'0d27291dc862905e8e3e8e0f570f0d10b98686e27ffe21d'}], u'name': u'newrelic_account', u'uuid': u'0adfc4ac85844e379e29d4b0a8fe4039', 'interval': u'300', 'sourcetype': u'newrelic_account', 'streaming_mode_xml': True, u'title': u'New Relic Account Summary', u'data_inputs_options': [{u'name': u'account', u'required_on_edit': False, u'default_value': u'', u'format_type': u'text', u'placeholder': u'######', u'title': u'New Relic Account Number', u'type': u'customized_var', u'description': u'This can be found in the URL when you log into New Relic.  e.g.  https://rpm.newrelic.com/accounts/######/...', u'required_on_create': True}, {u'name': u'api_key', u'required_on_edit': False, u'default_value': u'', u'format_type': u'text', u'placeholder': u'', u'title': u'New Relic API Key', u'type': u'customized_var', u'description': u'Your API Key can be found here: https://rpm.newrelic.com/accounts/######/integrations?page=api_keys', u'required_on_create': True}], u'code': u'\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\n\n\'\'\'\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n\'\'\'\n\'\'\'\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n\'\'\'\n\ndef validate_input(helper, definition):\n    """Implement your own validation logic to validate the input stanza configurations"""\n    # This example accesses the modular input variable\n    # account_number = definition.parameters.get(\'account_number\', None)\n    # api_key = definition.parameters.get(\'api_key\', None)\n    pass\n\ndef collect_events(helper, ew):\n    # Implement your data collection logic here\n    import HTMLParser\n    import json\n    import urllib\n    import requests\n\n\n    #  Process each account input in inputs.conf separately\n    #  First we\'ll get the account ID and api key for each input (stanza in inputs.conf) and then execute the REST API calls\n    stanzas = helper.input_stanzas\n    for stanza_name in stanzas:\n        opt_account = helper.get_arg(\'account\')\n        opt_api_key = helper.get_arg(\'api_key\')\n        idx = helper.get_output_index()\n        st = helper.get_sourcetype()\n\n        # If there are more than 1 input of this type, the arguments will be in a dictionary so grab them out\n        if type(opt_api_key) == dict:\n            opt_account = opt_account[stanza_name]\n            opt_api_key = opt_api_key[stanza_name]\n            idx = idx[stanza_name]\n            st = st[stanza_name]\n\n\n        \'\'\'\n        # Now on to processing this single account\n        \'\'\'\n\n        #url = "https://api.newrelic.com/v2/applications.json"\n        api_base_url = "https://api.newrelic.com/v2/"\n\n        urls = ["applications.json", "key_transactions.json","mobile_applications.json","alerts_violations.json"]\n\n         #headers = {\'X-Api-Key\':\'0d27291dc862905e8e3e8e0f570f0d10b98686e27ffe21d\'}\n        headers = {\'X-Api-Key\': \'{}\'.format(opt_api_key)}\n        parameters = "only_open=true"\n        account_dict = {\'account_id\': \'{}\'.format(opt_account)}\n\n        for i in range(len(urls)):\n            url = api_base_url + urls[i]\n            if i == 3:\n                # /alerts_violations.json --> requires a parameter of \'only_open=true\'\n                parameters = "only_open=true"\n            else:\n                parameters = ""\n\n            response = helper.send_http_request(url, "GET", headers=headers,  parameters=parameters, payload=None, cookies=None, verify=None, cert=None, timeout=None, use_proxy=True)\n\n            #r_headers = response.headers\n            #r_cookies = response.cookies\n            r_json = response.json()\n            r_status = response.status_code\n\n            # check the response status, if the status is not sucessful, raise requests.HTTPError\n            response.raise_for_status()\n\n            # if all is well, let\'s add the account ID to the event\n            data = json.loads(json.dumps(r_json))\n            data.update(account_dict)\n\n            # source=helper.get_input_name()\n            src = urls[i]\n            event = helper.new_event(source=src, index=idx, sourcetype=st, data=json.dumps(data))\n            try:\n                ew.write_event(event)\n            except Exception as e:\n                raise e\n       \n\n\n\n\n\n\n    """\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_account = helper.get_arg(\'account\')\n    opt_api_key = helper.get_arg(\'api_key\')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_account = helper.get_arg(\'account\', stanza_name)\n    opt_api_key = helper.get_arg(\'api_key\', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get user credentials\n    account = helper.get_user_credential_by_username("username")\n    account = helper.get_user_credential_by_id("account id")\n    # get global variable configuration\n    global_userdefined_global_var = helper.get_global_setting("userdefined_global_var")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log("log message")\n    # write to the log using specified log level\n    helper.log_debug("log message")\n    helper.log_info("log message")\n    helper.log_warning("log message")\n    helper.log_error("log message")\n    helper.log_critical("log message")\n    # set the log level for this modular input\n    # (log_level can be "debug", "info", "warning", "error" or "critical", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    """\n\n    \'\'\'\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    \'\'\'\n\n    \'\'\'\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    \'\'\'\n'}.get('global_settings', {}).get('customized_settings', [])
            for global_var in customized_settings:
                if global_var.get('type', '') == 'checkbox':
                    checkbox_fields.append(global_var['name'])
            self.global_checkbox_fields = checkbox_fields
        return self.global_checkbox_fields

if __name__ == "__main__":
    exitcode = ModInputnewrelic_account().run(sys.argv)
    sys.exit(exitcode)
