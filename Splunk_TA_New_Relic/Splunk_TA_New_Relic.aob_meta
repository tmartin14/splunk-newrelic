{"global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http"}, "log_settings": {}}}, "sourcetype_builder": {"newrelic_api": {"metadata": {"extractions_count": 0, "data_input_name": "new_relic_single_api_call", "cims_count": 0, "event_count": 0}, "conf_data": {"SHOULD_LINEMERGE": "0", "category": "Splunk App Add-on Builder", "pulldown_type": "1"}}, "newrelic_account": {"metadata": {"extractions_count": 0, "data_input_name": "newrelic_account", "cims_count": 0, "event_count": 0}, "conf_data": {"SHOULD_LINEMERGE": "0", "category": "Splunk App Add-on Builder", "pulldown_type": "1"}}, "newrelic_insights": {"metadata": {"extractions_count": 0, "data_input_name": "newrelic_insights", "cims_count": 0, "event_count": 0}, "conf_data": {"SHOULD_LINEMERGE": "0", "category": "Splunk App Add-on Builder", "pulldown_type": "1"}}}, "data_input_builder": {"datainputs": [{"index": "default", "interval": "300", "name": "new_relic_single_api_call", "type": "rest", "streaming_mode_xml": true, "sourcetype": "newrelic_api", "data_inputs_options": [{"rest_header": false, "description": "url", "name": "_rest_api_url", "value": "https://api.newrelic.com/v2${new_relic_api_url}?${url_parameters}"}, {"rest_header": false, "description": "method", "name": "_rest_api_method", "value": "GET"}, {"rest_header": true, "description": "X-Api-Key", "name": "X-Api-Key", "value": "${api_key}"}, {"type": "event_json_path_key", "name": "_event_json_path_key", "value": "applications"}, {"type": "ckpt_enable", "name": "_ckpt_enable", "value": false}, {"type": "ckpt_var_name", "name": "_ckpt_var_name", "value": ""}, {"type": "ckpt_json_path_key", "name": "_ckpt_json_path_key", "value": ""}, {"type": "ckpt_initial_value", "name": "_ckpt_initial_value", "value": ""}, {"type": "ckpt_source_time_format", "name": "_ckpt_source_time_format", "value": ""}, {"type": "ckpt_target_time_format", "name": "_ckpt_target_time_format", "value": ""}, {"default_value": "", "name": "api_key", "required_on_edit": false, "placeholder": "", "format_type": "text", "description": "Your API Key can be found here: https://rpm.newrelic.com/accounts/<######>/integrations?page=api_keys", "title": "New Relic API Key", "type": "customized_var", "required_on_create": true}, {"default_value": "/applications.json ", "name": "new_relic_api_url", "required_on_edit": false, "placeholder": "", "format_type": "text", "description": "e.g. /applications.json -or- /key_transactions.json   (for more options see https://rpm.newrelic.com/api/explore/)", "title": "New Relic API URL", "type": "customized_var", "required_on_create": true}, {"default_value": "", "name": "url_parameters", "required_on_edit": false, "placeholder": "names[]=Instance/connects&names[]=Errors/all", "format_type": "text", "description": "e.g. page=2   -or- names[]=Instance/connects&names[]=Errors/all", "title": "URL parameters", "type": "customized_var", "required_on_create": false}], "uuid": "b4952334ccd3431189186df499aa3168", "parameters": [{"default_value": "", "name": "api_key", "required": true, "help_string": "Your API Key can be found here: https://rpm.newrelic.com/accounts/<######>/integrations?page=api_keys", "format_type": "text", "label": "New Relic API Key", "type": "text", "placeholder": ""}, {"default_value": "/applications.json ", "name": "new_relic_api_url", "required": true, "help_string": "e.g. /applications.json -or- /key_transactions.json   (for more options see https://rpm.newrelic.com/api/explore/)", "format_type": "text", "label": "New Relic API URL", "type": "text", "placeholder": ""}, {"default_value": "", "name": "url_parameters", "required": false, "help_string": "e.g. page=2   -or- names[]=Instance/connects&names[]=Errors/all", "format_type": "text", "label": "URL parameters", "type": "text", "placeholder": "names[]=Instance/connects&names[]=Errors/all"}], "title": "New Relic Single API Call", "description": "Use this to collect data from a single specific New Relic APM REST API", "use_external_validation": true, "customized_options": [{"name": "api_key", "value": "0d27291dc862905e8e3e8e0f570f0d10b98686e27ffe21d"}, {"name": "new_relic_api_url", "value": "/applications.json"}, {"name": "url_parameters", "value": ""}]}, {"index": "default", "interval": "300", "name": "newrelic_insights", "type": "rest", "streaming_mode_xml": true, "sourcetype": "newrelic_insights", "data_inputs_options": [{"rest_header": false, "description": "url", "name": "_rest_api_url", "value": "https://insights-api.newrelic.com/v1/accounts/${account_number}/query?nrql=${nrql_query}"}, {"rest_header": false, "description": "method", "name": "_rest_api_method", "value": "GET"}, {"rest_header": true, "description": "X-Query-Key", "name": "X-Query-Key", "value": "${insights_api_key}"}, {"name": "_event_json_path_key", "type": "event_json_path_key", "value": ""}, {"name": "_ckpt_enable", "type": "ckpt_enable", "value": false}, {"name": "_ckpt_var_name", "type": "ckpt_var_name", "value": ""}, {"name": "_ckpt_json_path_key", "type": "ckpt_json_path_key", "value": ""}, {"name": "_ckpt_initial_value", "type": "ckpt_initial_value", "value": ""}, {"name": "_ckpt_source_time_format", "type": "ckpt_source_time_format", "value": ""}, {"name": "_ckpt_target_time_format", "type": "ckpt_target_time_format", "value": ""}, {"default_value": "", "name": "insights_api_key", "required_on_edit": false, "placeholder": "", "format_type": "text", "description": "You can create or locate your API Key here:  https://insights.newrelic.com/accounts/XXXXXX/manage/api_keys", "title": "Insights API Key", "type": "customized_var", "required_on_create": true}, {"default_value": "", "name": "account_number", "required_on_edit": false, "placeholder": "######", "format_type": "text", "description": "This is the number in your New Relic url.  e.g.: https://rpm.newrelic.com/accounts/<######>/applications", "title": "New Relic Account Number", "type": "customized_var", "required_on_create": true}, {"default_value": "SELECT average(duration) FROM PageView SINCE 5 Minutes ago", "name": "nrql_query", "required_on_edit": false, "placeholder": "", "format_type": "text", "description": "Enter the NRQL Query to execute", "title": "NRQL Query", "type": "customized_var", "required_on_create": true}], "uuid": "cf1e92e9e6264f74be8b79b4f32f251c", "parameters": [{"default_value": "", "name": "insights_api_key", "required": true, "help_string": "You can create or locate your API Key here:  https://insights.newrelic.com/accounts/XXXXXX/manage/api_keys", "format_type": "text", "label": "Insights API Key", "type": "text", "placeholder": ""}, {"default_value": "", "name": "account_number", "required": true, "help_string": "This is the number in your New Relic url.  e.g.: https://rpm.newrelic.com/accounts/<######>/applications", "format_type": "text", "label": "New Relic Account Number", "type": "text", "placeholder": "######"}, {"default_value": "SELECT average(duration) FROM PageView SINCE 5 Minutes ago", "name": "nrql_query", "required": true, "help_string": "Enter the NRQL Query to execute", "format_type": "text", "label": "NRQL Query", "type": "text", "placeholder": ""}], "title": "New Relic Insights Query", "description": "Collect data by executing a query in New Relic Insights via the REST API", "use_external_validation": true, "customized_options": [{"name": "insights_api_key", "value": "j5QaPs0W46XXR3DCAUCjitxb8lVhd2QI"}, {"name": "account_number", "value": "781649"}, {"name": "nrql_query", "value": "SELECT average(duration) FROM PageView SINCE 5 Minutes ago"}]}, {"index": "default", "interval": "300", "name": "newrelic_account", "type": "customized", "streaming_mode_xml": true, "sourcetype": "newrelic_account", "data_inputs_options": [{"default_value": "", "name": "account", "required_on_edit": false, "placeholder": "######", "format_type": "text", "description": "This can be found in the URL when you log into New Relic.  e.g.  https://rpm.newrelic.com/accounts/######/...", "title": "New Relic Account Number", "type": "customized_var", "required_on_create": true}, {"default_value": "", "name": "api_key", "required_on_edit": false, "placeholder": "", "format_type": "text", "description": "Your API Key can be found here: https://rpm.newrelic.com/accounts/######/integrations?page=api_keys", "title": "New Relic API Key", "type": "customized_var", "required_on_create": true}], "title": "New Relic Account Summary", "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # account_number = definition.parameters.get('account_number', None)\n    # api_key = definition.parameters.get('api_key', None)\n    pass\n\ndef collect_events(helper, ew):\n    # Implement your data collection logic here\n    import HTMLParser\n    import json\n    import urllib\n    import requests\n\n\n    #  Process each account input in inputs.conf separately\n    #  First we'll get the account ID and api key for each input (stanza in inputs.conf) and then execute the REST API calls\n    stanzas = helper.input_stanzas\n    for stanza_name in stanzas:\n        opt_account = helper.get_arg('account')\n        opt_api_key = helper.get_arg('api_key')\n        idx = helper.get_output_index()\n        st = helper.get_sourcetype()\n\n        # If there are more than 1 input of this type, the arguments will be in a dictionary so grab them out\n        if type(opt_api_key) == dict:\n            opt_account = opt_account[stanza_name]\n            opt_api_key = opt_api_key[stanza_name]\n            idx = idx[stanza_name]\n            st = st[stanza_name]\n\n\n        '''\n        # Now on to processing this single account\n        '''\n\n        #url = \"https://api.newrelic.com/v2/applications.json\"\n        api_base_url = \"https://api.newrelic.com/v2/\"\n\n        urls = [\"applications.json\", \"key_transactions.json\",\"mobile_applications.json\",\"alerts_violations.json\"]\n\n         #headers = {'X-Api-Key':'0d27291dc862905e8e3e8e0f570f0d10b98686e27ffe21d'}\n        headers = {'X-Api-Key': '{}'.format(opt_api_key)}\n        parameters = \"only_open=true\"\n        account_dict = {'account_id': '{}'.format(opt_account)}\n\n        for i in range(len(urls)):\n            url = api_base_url + urls[i]\n            if i == 3:\n                # /alerts_violations.json --> requires a parameter of 'only_open=true'\n                parameters = \"only_open=true\"\n            else:\n                parameters = \"\"\n\n            response = helper.send_http_request(url, \"GET\", headers=headers,  parameters=parameters, payload=None, cookies=None, verify=None, cert=None, timeout=None, use_proxy=True)\n\n            #r_headers = response.headers\n            #r_cookies = response.cookies\n            r_json = response.json()\n            r_status = response.status_code\n\n            # check the response status, if the status is not sucessful, raise requests.HTTPError\n            response.raise_for_status()\n\n            # if all is well, let's add the account ID to the event\n            data = json.loads(json.dumps(r_json))\n            data.update(account_dict)\n\n            # source=helper.get_input_name()\n            src = urls[i]\n            event = helper.new_event(source=src, index=idx, sourcetype=st, data=json.dumps(data))\n            try:\n                ew.write_event(event)\n            except Exception as e:\n                raise e\n       \n\n\n\n\n\n\n    \"\"\"\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_account = helper.get_arg('account')\n    opt_api_key = helper.get_arg('api_key')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_account = helper.get_arg('account', stanza_name)\n    opt_api_key = helper.get_arg('api_key', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get user credentials\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_userdefined_global_var = helper.get_global_setting(\"userdefined_global_var\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n", "parameters": [{"default_value": "", "name": "account", "required": true, "help_string": "This can be found in the URL when you log into New Relic.  e.g.  https://rpm.newrelic.com/accounts/######/...", "format_type": "text", "label": "New Relic Account Number", "type": "text", "placeholder": "######"}, {"default_value": "", "name": "api_key", "required": true, "help_string": "Your API Key can be found here: https://rpm.newrelic.com/accounts/######/integrations?page=api_keys", "format_type": "text", "label": "New Relic API Key", "type": "text", "placeholder": ""}], "description": "Collect data for Web Applications, Key Transactions, Mobile Applications and Alert Violations for a New Relic Account from a single input.", "use_external_validation": true, "customized_options": [{"name": "account", "value": "781649"}, {"name": "api_key", "value": "0d27291dc862905e8e3e8e0f570f0d10b98686e27ffe21d"}], "uuid": "0adfc4ac85844e379e29d4b0a8fe4039"}]}, "alert_action_builder": {"modular_alerts": [{"short_name": "alerts_to_newrelic", "smallIcon": "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", "parameters": [{"default_value": "", "name": "account", "value": "781649", "required": true, "help_string": "New Relic Insights Account you would like Splunk Alerts sent to.", "format_type": "text", "label": "New Relic Account Number", "type": ""}, {"default_value": "", "name": "apikey", "value": "HATJkn-1IAYzm2eLbf2aJ6tZYCrt7Cxa", "required": true, "help_string": "You can create or locate your Insights API Key here:  https://insights.newrelic.com/accounts/XXXXXX/manage/api_keys", "format_type": "text", "label": "New Relic Insights API Key", "type": ""}, {"default_value": "SplunkAlert", "name": "eventtype", "value": "SplunkAlert", "required": true, "help_string": "The event type [table] that New Relic Insights will store the Splunk Alerts in", "format_type": "text", "label": "Insights Event Type", "type": ""}], "largeIcon": "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", "description": "Send Alerts to New Relic Insights", "uuid": "c5ac0b2518c84b9c967576104a71019c", "code": "\n# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets the alert action parameters and prints them to the log\n    account = helper.get_param(\"account\")\n    helper.log_info(\"account={}\".format(account))\n\n    apikey = helper.get_param(\"apikey\")\n    helper.log_info(\"apikey={}\".format(apikey))\n\n    eventtype = helper.get_param(\"eventtype\")\n    helper.log_info(\"eventtype={}\".format(eventtype))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action alerts_to_newrelic started.\")\n\n\n\n\n\n\n    # TODO: Implement your alert action logic here\n    import json\n    \n    acctId = helper.get_param(\"account\")\n    insertKey = helper.get_param(\"apikey\")\n    eventType = helper.get_param(\"eventtype\")\n    insightsURL = 'https://insights-collector.newrelic.com/v1/accounts/' + acctId + '/events'\n    \n    \n    # If the value is a number represented as a String, change it to a Number for Insights.\n    # if the key is in the 'dontChange' list, then leave those as Strings\n    dontChangeList = ['HTTPCode', 'httpcode']\n    \n    def parseFields(event):\n        event_out = {}\n        for key in event:\n            if key in dontChangeList:\n                event_out[key] = event[key]\n            else:\n                try:\n                    result_float = float(event[key])\n                    event_out[key] = result_float\n                except ValueError:\n                    event_out[key] = event[key]\n        return event_out\n\n\n    events = helper.get_events()\n\n    results_out = []\n    for event in events:\n        event['eventType'] = eventType\n        results_out.append(parseFields(event))\n\n    #helper.log_info(\"everything={}\".format(results_out))\n\n    payload = json.dumps(results_out)\n    headers = {  'X-Insert-Key': '{}'.format(insertKey), 'Content-Type': 'application/json'  }\n    response = helper.send_http_request(insightsURL, \"POST\", parameters=None, payload=payload, headers=headers, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    \n    #helper.log_info(\"result={}\".format(response.text))  \n    response.raise_for_status()\n    \n    return response.status_code\n\n \n    \n    \n    return 0\n", "label": "Send to New Relic"}]}, "basic_builder": {"large_icon": "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", "visible": false, "build_no": 1, "tab_version": "2.1.0", "tab_build_no": "2165", "appname": "Splunk_TA_New_Relic", "author": "tomm@splunk.com", "version": "1.5.0", "theme": "#38b8bf", "description": "Collects APM, Alerts and Insights Data from the New Relic into Splunk.  Also includes an Alert Action to send Splunk Alerts into New Relic Insights.", "friendly_name": "Splunk Add-on for New Relic", "small_icon": "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"}, "validation": {"validators": ["best_practice_validation", "cim_mapping_validation", "field_extract_validation", "app_cert_validation"], "progress": 1.0, "validation_id": "v_1485892973_61", "status": "job_finished"}}